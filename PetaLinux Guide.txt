


*****************************************************************************************************
// Part 1 - Guides


// Petalinux User Guide: 

https://www.xilinx.com/support/documentation/sw_manuals/xilinx2018_3/ug1144-petalinux-tools-reference-guide.pdf

// PetaLinux installation Guide:

https://www.digikey.com/eewiki/display/linuxonarm/Zynq-7000

// Be sure to replace the $lab444 with whatever your home directory is on your computer!!

*****************************************************************************************************



*****************************************************************************************************
// Part 2 - Neccesary default packages and dependancies for PetaLinux


// Install the following packages and libraries

sudo apt-get update
sudo apt-get upgrade
sudo dpkg --add-architecture i386 && sudo apt-get update && sudo apt-get install ia32-libs
sudo apt-get install iproute
sudo apt-get install gawk
sudo apt-get install gcc
sudo apt-get install git-core
sudo apt-get install make
sudo apt-get install net-tools
sudo apt-get install ncurses-dev
sudo apt-get install libncurses5-dev
sudo apt-get install tftpd*
sudo apt-get install zlib1g-dev
sudo apt-get install flex
sudo apt-get install bison
sudo apt-get install lib32z1
sudo apt-get install lib32ncurses5
sudo apt-get install lib32bz2-1.0
sudo apt-get install ia32gcc1
sudo apt-get install lib32stdc++6
sudo apt-get install libselinux1
sudo apt-get install python3
sudo apt-get install dos2unix 
sudo apt-get install iproute2
sudo apt-get install xvfb
sudo apt-get install git
sudo apt-get install gnupg
sudo apt-get install wget
sudo apt-get install diffstat
sudo apt-get install chrpath
sudo apt-get install xterm
sudo apt-get install socat
sudo apt-get install autoconf
sudo apt-get install tar
sudo apt-get install libtool
sudo apt-get install unzip
sudo apt-get install texinfo
sudo apt-get install gcc-multilib
sudo apt-get install build-essential
sudo apt-get install libsdl1.2-dev
sudo apt-get install libglib2.0-dev
sudo apt-get install libsdl-dev
sudo apt-get install build-essential
sudo apt-get install glib2.0
sudo apt-get install automake
sudo apt-get install screen
sudo apt-get install pax
sudo apt-get install gzip
sudo apt-get install libtool-bin
dpkg -s libtool-bin
sudo apt-get install zlib1g:i386
dpkg -s zlib1g:i386
sudo apt-get update
sudo apt-get upgrade


// Install the following additional packages (if possible! Some may not be necessary)

sudo apt-get install apache2
sudo apt-get install tftp-server
sudo apt-get install wget
sudo apt-get install libglib2.0-dev
sudo apt-get install gparted
sudo apt-get install picocom
sudo apt-get install subversion
sudo apt-get install libsvn-dev
sudo apt-get install libapache2-mod-svn
sudo apt-get install devmem2
sudo a2enmod dav dav_svn
sudo service apache2 restart
sudo apt-get update
sudo apt-get upgrade

*****************************************************************************************************



*****************************************************************************************************
// Part 3 - Install Vivado and PetaLinux


// Install Vivado
// Download your selected version of Vivado from Xilinx.com

chmod +x Xilinx_*.bin
sudo ./Xilinx_*.bin


// Once the installer loads, click "Next".
// Then enter your Xilinx username and password and leave "Download and Install Now" selected.
// Click "Next".
// Click "I Agree" to all three statements.
// Click "Next".
// Select "Vivado HLx Design Edition" (second option?)
// Click "Next".
// Under "Design Tools", make sure that "Vivado Design Suite" and "Software Developer Kit (SDK)" are
// selected.
// In the "Devices" menu, select all boxes.
// Click "Next".
// For the installation directory, create a directory called "/tools/Xilinx" select it. 
// Then de-select "Create program group entries" and "Create desktop shortcuts". 
// Click "Next".
// Click "Install" and wait for the installer to finish. It will take about an hour.


// After installation is finished, install the Xilinx cable drivers:

cd /tools/Xilinx/Vivado/2018.3/data/xicom/cable_drivers/lin64/install_script/install_drivers
sudo ./install_drivers


// Do some permissions clean ups:

cd ~/.Xilinx/Vivado
sudo chown -R $lab444 *
sudo chmod -R 777 *


// Note: this one may not work, thats fine!

sudo chgrp -R $lab44 *


// Add the Vivado binary directory to your path:

cd
echo 'export PATH="/tools/Xilinx/Vivado/2018.3/bin:/tools/Xilinx/SDK/2018.3/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc


// Test Vivado works by going to terminal and typing:
vivado


// Add the licenses to Vivado by adding the following commands to the following files:
// Add your own licensing information to the commands above!!
// Commands:

export XILINDXD_LICENSE_FILE=
export LM_LICENSE_FILE=



// *** Press ctrl+h to see hidden files
// Add both commands to the bottom of each file
// Files:

cd /tools/Xilinx/Vivado/2018.3/
sudo nano settings64.sh
sudo nano .settings64-Vivado.sh
cd
sudo nano .profile
sudo nano .bachrc

// Every time you load the terminal after this point, you will see some config. Messages - this is fine. 
// After all commands have been entered, save the files, exit the terminal, restart PC
// The Xilinx licenses should be ready now

// Now to install PetaLinux

cd Documents
mkdir PetaLinux
cd Downloads
./petalinux-v2018.3-final-installer-run ../PetaLinux/
*****************************************************************************************************



*****************************************************************************************************
// FIRST TIME ONLY
// Point to the petalinux directory
// May need to hit ctrl+h to reveal hidden files
cd/etc
sudo gedit bash.bashrc

// At the end of the file include:
source /home/lab444/Documents/PetaLinux/settings.sh
source /tools/Xilinx/Vivado/2018.3/settings64.sh

// Save and exit
// Enter the following in terminal and select NO
sudo dpkg-reconfigure dash

// Close and reopen the terminal
*****************************************************************************************************



*****************************************************************************************************
// Part 4 - Setup SD card

// Partition the SD card in half with the following command and corresponding GUI

sudo gparted

// First partition: Name: BOOT | Size: 500 MB | Format: fat32 | Set flags: iba, boot
// Second partition: Name: ROOTFS | Size: 1 GB+ | Format: ext4


// Download the following tarball:

cd Downloads
wget -c https://rcn-ee.com/rootfs/eewiki/minfs/ubuntu-18.04.3-minimal-armhf-2019-11-23.tar.xz


// Extract the tarball we just downloaded

tar xf ubuntu-18.04.3-minimal-armhf-2019-11-23.tar.xz



// Go into the folder and extract the nested tarball onto the ROOTFS parition of the SD Card
cd ubuntu-18.04.3-minimal-armhf-2019-11-23/
sudo tar xvfp ./armhf-rootfs-ubuntu-bionic.tar -C /media/lab444/ROOTFS/ --no-same-owner


// Fix the permissions (sometmies sync needs to be run a few times)

sync
sudo chown root:root /media/lab444/ROOTFS/
sudo chmod 755 /media/lab444/ROOTFS/

*****************************************************************************************************



*****************************************************************************************************
Part 5 - Create a boot image with your hardware from Vivado to load onto the SD card


// At this point you should have a hardware design with the bitstream written

source /Documents/PetaLinux/settings.sh
echo $PETALINUX

petalinux-create --type project --template zynqMP --name PROJECT-FOLDER-NAME-HERE
cd PROJECT-FOLDER-NAME-HERE

// Export hardware to the petalinux project folder created
// Go to your Vivado hardware project. Go to file --> Export --> Export hardware
// Export your hardware file ".hdf" to your local petalinux project directory

// Go to your Vivado hardware project. Go to file --> Export --> Export bitstream
// Export your bistream file ".bit" to your local petalinux project directory; name it: bitstream.bit

// Run the following command after to get a descirption of you hardware files

petalinux-config --get-hw-description


// New window pops up. Naviagte to the save button and hit enter. Leave name as default.
// Exit. Everything stays as default. Exit the window after that.
// Here it takes some time to generate the files. This part takes a lot of time so don't panic

// After it is finished, build the project

petalinux-build


// Package the project

petalinux-package --boot --format BIN --fsbl images/linux/zynqmp_fsbl.elf --u-boot images/linux/u-boot.elf --pmufw images/linux/pmufw.elf --fpga images/linux/*.bit --force


// Go to your local petalinux project directory and run the package command

cd /Documents/Testing/PROJECT-FOLDER-NAME-HERE
petalinux-package --boot --fsbl images/linux/zynqmp_fsbl.elf --fpga bitstream.bit --u-boot --force

// Then go back to the petalinux project directory
cd /Documents/Testing/PROJECT-FOLDER-NAME-HERE

// Enter the following command
petalinux-config

// Select Image Packaging Configuration ---> Root filesystem type.
// Select SD card as the RootFS type.
// Exit menuconfig and save configuration settings. Exit the next window.


// For Gigabit Ethernet and USB 3.0 support do the following:
// Enter the following command
petalinux-config -c kernel

// Device Drivers --> USB Support
// Enable the following:
// <*> Support for Host-side USB
//     <*> EHCI HCD (USB 2.0) support
//     <*> USB Mass Storage support
//     <*> ChipIdea Highspeed Dual Role Controllercd
//     <*> ChipIdea host controller
//         USB Physical Layer drivers --->
//         <*> Generic ULPI Transceiver Driver
// Save and exit all windows


// Go and modify the following file
cd project-spec/meta-user/recipes-bsp/device-tree/files
nano system-user.dtsi


// Overwrite the file with the following code [enables boot-up and ethernet access and USB]:

/include/ "system-conf.dtsi"

/ {

	model = "ZynqMP ZCU104 RevC";
	compatible = "xlnx,zynqmp-zcu104-revC", "xlnx,zynqmp-zcu104", "xlnx,zynqmp";
      

	aliases {
		ethernet0 = &gem3;
		usb0 = &usb0;
	};
};

&sdhci1 {
 status = "okay";
      xlnx,has-cd = <0x1>;
       xlnx,has-power = <0x0>;
     xlnx,has-wp = <0x1>;
      disable-wp;
    no-1-8-v;
};

&gem3 {
	status = "okay";
	phy-handle = <&phy0>;
	phy-mode = "rgmii-id";
	phy0: ethernet-phy@c {
		reg = <0xc>;
		ti,rx-internal-delay = <0x8>;
		ti,tx-internal-delay = <0xa>;
		ti,fifo-depth = <0x1>;
		ti,dp83867-rxctrl-strap-quirk;
	};
};

&usb0 {
    status = "okay";
};
  
&dwc3_0 {
    status = "okay";
    dr_mode = "host";
    snps,usb3_lpm_capable;
    phy-names = "usb3-phy";
    maximum-speed = "super-speed";
};



// Make sure at this point you are in the petalinux project directory
// Rebuild the project to apply the new configuration settings
petalinux-build

// After build is finished then while in your petalinux project directory:
cd images/linux/

// Extract the file: rootfs.cpio
// After:
cd rootfs/lib

sudo cp -R modules /media/lab444/ROOTFS/lib/

// Copy the following files to the BOOT partition of the SD card: image.ub and BOOT.BIN
cd Documents/Testing/PROJECT-FOLDER-NAME-HERE/images/linux
cp BOOT.BIN /media/lab444/BOOT/
cp image.ub /media/lab444/BOOT/
cd


// Eject the SD card from the computer and insert the microSD card into the FPGA
// Ensure that the FPGA is in "Boot SD Mode"
// Ensure by this point you have picocom installed!
// These settings solely depend on which USB port you have the FPGA plugged into!! BE AWARE OF THIS BEFORE YOU PROCEED!

sudo picocom -b 115200 /dev/ttyUSB1

// sudo picocom -b 115200 /dev/ttyUSB0
// sudo picocom -b 115200 /dev/ttyUSB2
// sudo picocom -b 115200 /dev/ttyUSB3

// To exit picocom:
// ctrl-a
// ctrl-q


// Ubuntu Login
Login: ubuntu
Password: temppwd

// To add internet access to the FPGA:
sudo apt-get update
sudo apt-get upgrade


// Mount USB for each use
sudo mount -t vfat /dev/sda1 /media/usbstick 
cd /media/usbstick/



// USB Access
// Current USB Drive name: sda1

lsblk
sudo mkdir /media/usbstick
sudo mount -t vfat /dev/NAME_OF_USB_DEVICE /media/usbstick 
cd /media/usbstick/



